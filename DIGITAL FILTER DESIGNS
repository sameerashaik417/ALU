module fir_filter #(
    parameter N = 4, // Number of taps
    parameter WIDTH = 16 // Bit width
)(
    input clk,
    input reset,
    input signed [WIDTH-1:0] x_in, // Input signal
    output reg signed [WIDTH+15:0] y_out // Output signal, size accommodates sum
);

    // Example coefficients (can be generated using MATLAB or tools)
    // For demonstration: h = [1, 2, 3, 4]
    wire signed [WIDTH-1:0] coeffs [0:N-1];
    assign coeffs[0] = 16'sd1;
    assign coeffs[1] = 16'sd2;
    assign coeffs[2] = 16'sd3;
    assign coeffs[3] = 16'sd4;

    reg signed [WIDTH-1:0] shift_reg [0:N-1];
    integer i;

    always @(posedge clk or posedge reset) begin
        if (reset) begin
            for (i = 0; i < N; i = i + 1) begin
                shift_reg[i] <= 0;
            end
            y_out <= 0;
        end else begin
            // Shift input samples
            for (i = N-1; i > 0; i = i - 1) begin
                shift_reg[i] <= shift_reg[i-1];
            end
            shift_reg[0] <= x_in;

            // Compute output
            y_out <= 0;
            for (i = 0; i < N; i = i + 1) begin
                y_out <= y_out + shift_reg[i] * coeffs[i];
            end
        end
    end

endmodule
