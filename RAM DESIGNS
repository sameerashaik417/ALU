module PipelineProcessor(module PipelineProcessor(
    input clk,
    input reset
);
    // Instruction Memory (8 x 8-bit instructions)
    reg [7:0] instr_mem [0:7];
    // Data Memory (8 x 8-bit)
    reg [7:0] data_mem [0:7];
    // Register File (4 x 8-bit)
    reg [7:0] regfile [0:3];

    // Program counter
    reg [2:0] pc;

    // Pipeline registers
    reg [7:0] IF_ID_instr;
    reg [2:0] IF_ID_pc;
    reg [7:0] ID_EX_instr;
    reg [7:0] ID_EX_dataA, ID_EX_dataB;
    reg [2:0] ID_EX_pc;
    reg [7:0] EX_WB_result;
    reg [1:0] EX_WB_rd;
    reg [1:0] EX_WB_op;
    reg [2:0] EX_WB_pc;

    // For simulation: display pipeline stages
    wire [7:0] curr_instr = instr_mem[pc];

    // OPCODES
    localparam ADD = 2'b00, SUB = 2'b01, LOAD = 2'b10;

    // Instruction decode helpers
    function [1:0] get_opcode(input [7:0] instr); get_opcode = instr[7:6]; endfunction
    function [1:0] get_rd(input [7:0] instr); get_rd = instr[5:4]; endfunction
    function [1:0] get_rs(input [7:0] instr); get_rs = instr[3:2]; endfunction
    function [1:0] get_rt(input [7:0] instr); get_rt = instr[1:0]; endfunction

    // Simulation initialization
    initial begin
        // ADD R0, R1, R2   (R0 = R1 + R2)
        instr_mem[0] = {ADD, 2'b00, 2'b01, 2'b10}; // 00 00 01 10
        // SUB R1, R0, R3   (R1 = R0 - R3)
        instr_mem[1] = {SUB, 2'b01, 2'b00, 2'b11};
        // LOAD R2, [R1]    (R2 = MEM[R1])
        instr_mem[2] = {LOAD, 2'b10, 2'b01, 2'b00};
        // ADD R3, R2, R1   (R3 = R2 + R1)
        instr_mem[3] = {ADD, 2'b11, 2'b10, 2'b01};
        // NOPs
        instr_mem[4] = 8'b0; instr_mem[5] = 8'b0; instr_mem[6] = 8'b0; instr_mem[7] = 8'b0;

        // Initialize Data Memory
        data_mem[0]=8'd10; data_mem[1]=8'd20; data_mem[2]=8'd30; data_mem[3]=8'd40;
        data_mem[4]=8'd0;  data_mem[5]=8'd0;  data_mem[6]=8'd0;  data_mem[7]=8'd0;

        // Initialize Registers
        regfile[0]=8'd5; regfile[1]=8'd2; regfile[2]=8'd3; regfile[3]=8'd1;

        pc = 0;
        IF_ID_instr = 0; IF_ID_pc = 0;
        ID_EX_instr = 0; ID_EX_dataA = 0; ID_EX_dataB = 0; ID_EX_pc = 0;
        EX_WB_result = 0; EX_WB_rd = 0; EX_WB_op = 0; EX_WB_pc = 0;
    end

    // Pipeline operation
    always @(posedge clk or posedge reset) begin
        if (reset) begin
            pc <= 0;
            IF_ID_instr <= 0; IF_ID_pc <= 0;
            ID_EX_instr <= 0; ID_EX_dataA <= 0; ID_EX_dataB <= 0; ID_EX_pc <= 0;
            EX_WB_result <= 0; EX_WB_rd <= 0; EX_WB_op <= 0; EX_WB_pc <= 0;
        end else begin
            // WB Stage
            if (EX_WB_op == ADD || EX_WB_op == SUB || EX_WB_op == LOAD) begin
                regfile[EX_WB_rd] <= EX_WB_result;
            end

            // EX Stage
            EX_WB_pc <= ID_EX_pc;
            EX_WB_rd <= get_rd(ID_EX_instr);
            EX_WB_op <= get_opcode(ID_EX_instr);
            case (get_opcode(ID_EX_instr))
                ADD: EX_WB_result <= ID_EX_dataA + ID_EX_dataB;
                SUB: EX_WB_result <= ID_EX_dataA - ID_EX_dataB;
                LOAD: EX_WB_result <= data_mem[ID_EX_dataA[2:0]];
                default: EX_WB_result <= 0;
            endcase

            // ID Stage
            ID_EX_instr <= IF_ID_instr;
            ID_EX_pc <= IF_ID_pc;
            ID_EX_dataA <= regfile[get_rs(IF_ID_instr)];
            ID_EX_dataB <= regfile[get_rt(IF_ID_instr)];

            // IF Stage
            IF_ID_instr <= curr_instr;
            IF_ID_pc <= pc;

            // Increment PC
            pc <= pc + 1;
        end
    end

    // Simulation output
    always @(posedge clk) begin
        $display("Cycle %0d", $time/5);
        $display("IF : PC=%0d INSTR=%b", pc, curr_instr);
        $display("ID : PC=%0d INSTR=%b", IF_ID_pc, IF_ID_instr);
        $display("EX : PC=%0d INSTR=%b", ID_EX_pc, ID_EX_instr);
        $display("WB : PC=%0d INSTR=%b", EX_WB_pc, {EX_WB_op, EX_WB_rd, 4'b0});
        $display("Regs: %d %d %d %d", regfile[0], regfile[1], regfile[2], regfile[3]);
        $display("-----");
    end

endmodule

    input clk,

    input reset

);

    // Instruction Memory (8 x 8-bit instructions)

    reg [7:0] instr_mem [0:7];

    // Data Memory (8 x 8-bit)

    reg [7:0] data_mem [0:7];

    // Register File (4 x 8-bit)

    reg [7:0] regfile [0:3];



    // Program counter

    reg [2:0] pc;



    // Pipeline registers

    reg [7:0] IF_ID_instr;

    reg [2:0] IF_ID_pc;

    reg [7:0] ID_EX_instr;

    reg [7:0] ID_EX_dataA, ID_EX_dataB;

    reg [2:0] ID_EX_pc;

    reg [7:0] EX_WB_result;

    reg [1:0] EX_WB_rd;

    reg [1:0] EX_WB_op;

    reg [2:0] EX_WB_pc;



    // For simulation: display pipeline stages

    wire [7:0] curr_instr = instr_mem[pc];



    // OPCODES

    localparam ADD = 2'b00, SUB = 2'b01, LOAD = 2'b10;



    // Instruction decode helpers

    function [1:0] get_opcode(input [7:0] instr); get_opcode = instr[7:6]; endfunction

    function [1:0] get_rd(input [7:0] instr); get_rd = instr[5:4]; endfunction

    function [1:0] get_rs(input [7:0] instr); get_rs = instr[3:2]; endfunction

    function [1:0] get_rt(input [7:0] instr); get_rt = instr[1:0]; endfunction



    // Simulation initialization

    initial begin

        // ADD R0, R1, R2   (R0 = R1 + R2)

        instr_mem[0] = {ADD, 2'b00, 2'b01, 2'b10}; // 00 00 01 10

        // SUB R1, R0, R3   (R1 = R0 - R3)

        instr_mem[1] = {SUB, 2'b01, 2'b00, 2'b11};

        // LOAD R2, [R1]    (R2 = MEM[R1])

        instr_mem[2] = {LOAD, 2'b10, 2'b01, 2'b00};

        // ADD R3, R2, R1   (R3 = R2 + R1)

        instr_mem[3] = {ADD, 2'b11, 2'b10, 2'b01};

        // NOPs

        instr_mem[4] = 8'b0; instr_mem[5] = 8'b0; instr_mem[6] = 8'b0; instr_mem[7] = 8'b0;



        // Initialize Data Memory

        data_mem[0]=8'd10; data_mem[1]=8'd20; data_mem[2]=8'd30; data_mem[3]=8'd40;

        data_mem[4]=8'd0;  data_mem[5]=8'd0;  data_mem[6]=8'd0;  data_mem[7]=8'd0;



        // Initialize Registers

        regfile[0]=8'd5; regfile[1]=8'd2; regfile[2]=8'd3; regfile[3]=8'd1;



        pc = 0;

        IF_ID_instr = 0; IF_ID_pc = 0;

        ID_EX_instr = 0; ID_EX_dataA = 0; ID_EX_dataB = 0; ID_EX_pc = 0;

        EX_WB_result = 0; EX_WB_rd = 0; EX_WB_op = 0; EX_WB_pc = 0;

    end



    // Pipeline operation

    always @(posedge clk or posedge reset) begin

        if (reset) begin

            pc <= 0;

            IF_ID_instr <= 0; IF_ID_pc <= 0;

            ID_EX_instr <= 0; ID_EX_dataA <= 0; ID_EX_dataB <= 0; ID_EX_pc <= 0;

            EX_WB_result <= 0; EX_WB_rd <= 0; EX_WB_op <= 0; EX_WB_pc <= 0;

        end else begin

            // WB Stage

            if (EX_WB_op == ADD || EX_WB_op == SUB || EX_WB_op == LOAD) begin

                regfile[EX_WB_rd] <= EX_WB_result;

            end



            // EX Stage

            EX_WB_pc <= ID_EX_pc;

            EX_WB_rd <= get_rd(ID_EX_instr);

            EX_WB_op <= get_opcode(ID_EX_instr);

            case (get_opcode(ID_EX_instr))

                ADD: EX_WB_result <= ID_EX_dataA + ID_EX_dataB;

                SUB: EX_WB_result <= ID_EX_dataA - ID_EX_dataB;

                LOAD: EX_WB_result <= data_mem[ID_EX_dataA[2:0]];

                default: EX_WB_result <= 0;

            endcase



            // ID Stage

            ID_EX_instr <= IF_ID_instr;

            ID_EX_pc <= IF_ID_pc;

            ID_EX_dataA <= regfile[get_rs(IF_ID_instr)];

            ID_EX_dataB <= regfile[get_rt(IF_ID_instr)];



            // IF Stage

            IF_ID_instr <= curr_instr;

            IF_ID_pc <= pc;



            // Increment PC

            pc <= pc + 1;

        end

    end



    // Simulation output

    always @(posedge clk) begin

        $display("Cycle %0d", $time/5);

        $display("IF : PC=%0d INSTR=%b", pc, curr_instr);

        $display("ID : PC=%0d INSTR=%b", IF_ID_pc, IF_ID_instr);

        $display("EX : PC=%0d INSTR=%b", ID_EX_pc, ID_EX_instr);

        $display("WB : PC=%0d INSTR=%b", EX_WB_pc, {EX_WB_op, EX_WB_rd, 4'b0});

        $display("Regs: %d %d %d %d", regfile[0], regfile[1], regfile[2], regfile[3]);

        $display("-----");

    end



endmodule
